buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.github.eirnym.js2p' version '1.0'
    id "com.google.protobuf" version "0.9.4"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.12.0"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.barfuin.gradle.taskinfo' version '2.1.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.25.0'
    implementation "org.apache.avro:avro:1.11.1"
    implementation "com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39"
    implementation 'javax.validation:validation-api:1.1.0.CR2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
    implementation 'net.datafaker:datafaker:2.0.2'

    implementation 'org.apache.kafka:connect-api:3.6.0'
    implementation 'org.apache.kafka:connect-transforms:3.6.0'
    implementation('org.apache.kafka:kafka-streams:3.6.0') {
        exclude group:'org.apache.kafka', module: 'kafka-clients'
    }
    implementation('org.apache.kafka:kafka-clients:3.6.0!!')
    implementation('io.confluent:kafka-streams-avro-serde:7.5.1') {
        exclude group:'org.apache.kafka', module: 'kafka-clients'
        exclude group:'org.apache.kafka', module: 'kafka-streams'
    }
    implementation('io.confluent:kafka-streams-protobuf-serde:7.5.1') {
        exclude group:'org.apache.kafka', module: 'kafka-clients'
        exclude group:'org.apache.kafka', module: 'kafka-streams'
    }

    implementation "io.confluent:kafka-avro-serializer:7.5.0"
    implementation "io.confluent:kafka-protobuf-serializer:7.5.0"
    implementation "io.confluent:kafka-json-serializer:7.5.0"
    implementation "io.confluent:kafka-json-schema-serializer:7.5.1"
    implementation "io.confluent:kafka-schema-registry-client:7.5.0"
    implementation "io.confluent:kafka-json-schema-provider:7.5.0"
    implementation "io.confluent:kafka-protobuf-provider:7.5.0"

    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.23.1'

    testImplementation('org.junit.jupiter:junit-jupiter:5.10.3')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.10.3')
    testImplementation "org.apache.kafka:kafka-streams-test-utils:3.6.0"
    testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
    testImplementation 'org.testcontainers:kafka:1.20.0'
    testImplementation 'org.testcontainers:toxiproxy:1.20.0'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.0'
    }
}

compileJava {
    dependsOn(generateProto)
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

jsonSchema2Pojo {
    targetPackage = 'bbejeck.json.generated'
    generateBuilders = true
    annotationStyle = "JACKSON2"
    source = files("${project.projectDir}/src/main/json")
    targetDirectory = file("${project.DEFAULT_BUILD_DIR_NAME}/generated-main-json-java")
    includeJsr303Annotations = false
    propertyWordDelimiters = ['_'] as char[]
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform {
        excludeTags 'long', 'skip'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task longTests(type: Test) {
    useJUnitPlatform {
        includeTags 'long'
    }
}


//Schema Registry section
schemaRegistry {
    url = 'http://localhost:8081'
// optional set these if you have Schema Regsitry set up for authentication
//    credentials {
//        username = 'basicauthentication-username'
//        password = 'basicauthentication-password'
//    }

    compatibility {
        subject('avro-avengers-value', 'streams/src/main/avro/avenger.avsc', 'AVRO')
    }

    // Possible types are ["JSON", "PROTOBUF", "AVRO"]
    register {
        subject('avro-avengers-value','streams/src/main/avro/avenger.avsc', 'AVRO')
        subject('person','streams/src/main/avro/person.avsc', 'AVRO')
        subject('college-value','streams/src/main/avro/college.avsc', 'AVRO')
                .addReference("bbejeck.chapter_3.avro.PersonAvro", "person", 1)
        subject('company-value','streams/src/main/avro/company.avsc', 'AVRO')
                .addReference("bbejeck.chapter_3.avro.PersonAvro", "person", 1)


        subject('truck_event','streams/src/main/avro/truck_event.avsc', 'AVRO')
        subject('plane_event','streams/src/main/avro/plane_event.avsc', 'AVRO')
        subject('delivery_event','streams/src/main/avro/delivery_event.avsc', 'AVRO')
        subject('inventory-events-value', 'streams/src/main/avro/all_events.avsc','AVRO')
                .addReference("bbejeck.chapter_4.avro.TruckEvent", "truck_event", 1)
                .addReference("bbejeck.chapter_4.avro.PlaneEvent", "plane_event", 1)
                .addReference("bbejeck.chapter_4.avro.DeliveryEvent", "delivery_event", 1)
    }

    config {
        subject('avro-avengers-value', 'BACKWARD')
    }



    task runAvroProducer(type: JavaExec){
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.producer.avro.AvroProducer"
    }

    task runAvroConsumer(type: JavaExec){
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.consumer.avro.AvroConsumer"
    }

    task runCompanyProducer(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.producer.avro.AvroReferenceCompanyProducer"
    }

    task runCompanyConsumer(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.consumer.avro.AvroReferenceCompanyConsumer"
    }

    task runCollegeProducer(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.producer.avro.AvroReferenceCollegeProducer"
    }

    task runCollegeConsumer(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        mainClass = "bbejeck.chapter_3.consumer.avro.AvroReferenceCollegeConsumer"
    }

    clean {
        delete 'out'
    }


}
